AWSTemplateFormatVersion: "2010-09-09"
Description: "Prowler App Infrastructure - VPC, EC2, IAM Role, and Security Group"

Parameters:
  ProjectName:
    Type: String
    Default: prowler-app
    Description: Project name for resource naming

  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - qa
      - stag
      - prod
    Description: Environment for resource naming

  AllowedCIDR:
    Type: String
    Default: 0.0.0.0/0
    Description: CIDR block allowed for port 80 access
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$|^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(3[0-2]|[12][0-9]|[0-9]))$

  InstanceSize:
    Type: String
    Default: t3.medium
    AllowedValues:
      - t3.medium
      - t3a.medium
      - t4g.medium
    Description: Instance size for the prowler server

  LatestAmiId:
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: "/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-x86_64"

Resources:
  # VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/28
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub "vpc-${ProjectName}-${Environment}"

  # Public Subnet
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.0.0/28
      AvailabilityZone: !Select [0, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "subnet-public-${ProjectName}-${Environment}"

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "igw-${ProjectName}-${Environment}"

  # Attach Internet Gateway to VPC
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  # Route Table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "rt-public-${ProjectName}-${Environment}"

  # Default Route
  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # Associate Route Table with Public Subnet
  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet

  # Security Group
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "nsg-${ProjectName}-${Environment}"
      GroupDescription: Security group for Prowler EC2 instance
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: !Ref AllowedCIDR
          Description: Port 3000 access from specified CIDR
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: All outbound traffic
      Tags:
        - Key: Name
          Value: !Sub "nsg-${ProjectName}-${Environment}"

  # IAM Role for EC2
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "iamrole-${ProjectName}-${Environment}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Tags:
        - Key: Name
          Value: !Sub "iamrole-${ProjectName}-${Environment}"

  # Instance Profile
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub "instanceprofile-${ProjectName}-${Environment}"
      Roles:
        - !Ref EC2Role

  # EC2 Instance
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref LatestAmiId
      InstanceType: !Ref InstanceSize
      SubnetId: !Ref PublicSubnet
      SecurityGroupIds:
        - !Ref SecurityGroup
      IamInstanceProfile: !Ref EC2InstanceProfile
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash

          # Update the system
          dnf update -y

          # Install Docker
          dnf install -y docker

          # Start and enable Docker service
          systemctl start docker
          systemctl enable docker

          # Add ec2-user to docker group (allows running docker without sudo)
          usermod -a -G docker ec2-user

          # Install Docker Compose plugin (preferred method for newer Docker versions)
          mkdir -p /usr/local/lib/docker/cli-plugins
          curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/lib/docker/cli-plugins/docker-compose
          chmod +x /usr/local/lib/docker/cli-plugins/docker-compose

          # Also install as standalone binary for fallback
          curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose

          # Create a symbolic link for easier access
          ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose

          # Create a working directory for Prowler
          mkdir -p /home/ec2-user/prowler
          cd /home/ec2-user/prowler

          # Download Prowler configuration files
          curl -LO https://raw.githubusercontent.com/prowler-cloud/prowler/refs/heads/master/docker-compose.yml
          curl -LO https://raw.githubusercontent.com/prowler-cloud/prowler/refs/heads/master/.env

          # Get the public IP address of the instance
          export PUBLIC_IP=$(curl -s http://169.254.169.254/latest/meta-data/public-ipv4)

          # Log Public IP
          echo "Public IP: $PUBLIC_IP" >> /var/log/userdata-setup.log

          # Modify the .env file to use the public IP instead of localhost
          sed -i "s/localhost/$PUBLIC_IP/g" .env
          sed -i 's/127\.0\.0\.1:3000:3000/0.0.0.0:3000:3000/g' docker-compose.yml

          # Set proper ownership for ec2-user
          chown -R ec2-user:ec2-user /home/ec2-user/prowler

          # Wait for Docker service to be fully ready
          sleep 10

          # Set Default Platform
          export DOCKER_DEFAULT_PLATFORM=linux/amd64

          # Log Default Platform
          echo "Docker Default Platform: $DOCKER_DEFAULT_PLATFORM" >> /var/log/userdata-setup.log          

          # Run Docker Compose as ec2-user (try plugin first, fallback to standalone)
          sudo -u ec2-user bash -c 'cd /home/ec2-user/prowler && (docker compose up -d || docker-compose up -d)'

          # Optional: Add Docker Compose to PATH for all users
          echo 'export PATH="/usr/local/bin:$PATH"' >> /etc/profile

          # Log completion
          echo "Docker and Prowler setup completed at $(date)" >> /var/log/userdata-setup.log

      Tags:
        - Key: Name
          Value: !Sub "ec2-${ProjectName}-${Environment}"

Outputs:
  VPCId:
    Description: VPC ID
    Value: !Ref VPC
    Export:
      Name: !Sub "${AWS::StackName}-VPC-ID"

  PublicSubnetId:
    Description: Public Subnet ID
    Value: !Ref PublicSubnet
    Export:
      Name: !Sub "${AWS::StackName}-PublicSubnet-ID"

  SecurityGroupId:
    Description: Security Group ID
    Value: !Ref SecurityGroup
    Export:
      Name: !Sub "${AWS::StackName}-SecurityGroup-ID"

  EC2InstanceId:
    Description: EC2 Instance ID
    Value: !Ref EC2Instance
    Export:
      Name: !Sub "${AWS::StackName}-EC2Instance-ID"

  EC2PublicIP:
    Description: Public IP address of the EC2 instance
    Value: !GetAtt EC2Instance.PublicIp
    Export:
      Name: !Sub "${AWS::StackName}-EC2Instance-PublicIP"

  EC2PublicDNS:
    Description: Public DNS name of the EC2 instance
    Value: !GetAtt EC2Instance.PublicDnsName
    Export:
      Name: !Sub "${AWS::StackName}-EC2Instance-PublicDNS"

  IAMRoleArn:
    Description: IAM Role ARN
    Value: !GetAtt EC2Role.Arn
    Export:
      Name: !Sub "${AWS::StackName}-IAMRole-ARN"
